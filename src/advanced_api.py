#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Advanced Football Prediction API
Author: Berke √ñzkul
Description: Geli≈ümi≈ü tahmin modeli ile API
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import urllib.parse as urlparse
from advanced_model import AdvancedFootballPredictor
import os

class AdvancedFootballPredictionHandler(BaseHTTPRequestHandler):
    """Geli≈ümi≈ü futbol tahmin API handler"""
    
    def __init__(self, *args, **kwargs):
        # Model ve takƒ±m listesini y√ºkle
        self.load_model_and_data()
        super().__init__(*args, **kwargs)
    
    def load_model_and_data(self):
        """Model ve verileri y√ºkle"""
        try:
            # Geli≈ümi≈ü modeli y√ºkle
            self.predictor = AdvancedFootballPredictor()
            
            if os.path.exists('advanced_football_model.pkl'):
                print("üìä Geli≈ümi≈ü model y√ºkleniyor...")
                if self.predictor.load_model('advanced_football_model.pkl'):
                    print("‚úÖ Geli≈ümi≈ü model ba≈üarƒ±yla y√ºklendi!")
                else:
                    print("‚ö†Ô∏è Geli≈ümi≈ü model y√ºklenemedi, basit model kullanƒ±lacak")
                    self._fallback_to_simple_model()
            else:
                print("‚ö†Ô∏è Geli≈ümi≈ü model bulunamadƒ±, basit model kullanƒ±lacak")
                self._fallback_to_simple_model()
            
            # Takƒ±m listesi
            self.teams = [
                "Arsenal", "Chelsea", "Liverpool", "Man City", "Man United", "Tottenham",
                "Newcastle", "Brighton", "Aston Villa", "West Ham", "Crystal Palace",
                "Leicester", "Everton", "Southampton", "Burnley", "Norwich", "Watford",
                "Wolves", "Leeds", "Blackburn", "Birmingham", "Fulham", "Brentford",
                "Sheffield United", "Bournemouth", "Cardiff", "Huddersfield", "Stoke",
                "Swansea", "Hull", "Middlesbrough", "Sunderland", "QPR", "Derby",
                "Bolton", "Wigan", "Reading", "Blackpool"
            ]
            
        except Exception as e:
            print(f"‚ùå Model y√ºkleme hatasƒ±: {e}")
            self._fallback_to_simple_model()
    
    def _fallback_to_simple_model(self):
        """Basit modele geri d√∂n"""
        try:
            from simple_model import SimpleFootballPredictor
            self.predictor = SimpleFootballPredictor()
            if os.path.exists('simple_football_model.txt'):
                self.predictor.load_model('simple_football_model.txt')
                print("‚úÖ Basit model fallback ba≈üarƒ±lƒ±")
            else:
                print("‚ùå Hi√ßbir model bulunamadƒ±!")
        except Exception as e:
            print(f"‚ùå Basit model fallback hatasƒ±: {e}")
            self.predictor = None
    
    def do_GET(self):
        """GET isteklerini i≈üle"""
        parsed_url = urlparse.urlparse(self.path)
        path = parsed_url.path
        query = urlparse.parse_qs(parsed_url.query)
        
        # CORS headers
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        
        if path == '/':
            self.serve_home()
        elif path == '/health':
            self.serve_health()
        elif path == '/teams':
            self.serve_teams()
        elif path == '/predict':
            self.serve_prediction(query)
        elif path == '/model-info':
            self.serve_model_info()
        else:
            self.send_error(404, "Endpoint bulunamadƒ±")
    
    def do_POST(self):
        """POST isteklerini i≈üle"""
        if self.path == '/predict':
            try:
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                
                if not post_data:
                    self.send_json_response({
                        'error': 'Bo≈ü istek g√∂vdesi'
                    }, status=400)
                    return
                
                # Tahmin yap
                prediction = self.predictor.predict_match(home_team, away_team)
                
                self.send_json_response({
                    'success': True,
                    'match': f"{home_team} vs {away_team}",
                    'prediction': prediction,
                    'model_info': {
                        'type': 'advanced' if hasattr(self.predictor, 'home_model') else 'simple',
                        'confidence_explanation': 'Geli≈ümi≈ü makine √∂ƒürenmesi algoritmalarƒ± kullanƒ±larak hesaplandƒ±' if hasattr(self.predictor, 'home_model') else 'Basit istatistiksel model kullanƒ±ldƒ±'
                    }
                })
                
            except json.JSONDecodeError:
                self.send_json_response({
                    'error': 'Ge√ßersiz JSON'
                }, status=400)
            except Exception as e:
                self.send_json_response({
                    'error': str(e)
                }, status=500)
        else:
            self.send_error(404, "Endpoint bulunamadƒ±")
    
    def serve_home(self):
        """Geli≈ümi≈ü ana sayfa"""
        model_type = 'Advanced ML' if hasattr(self.predictor, 'home_model') else 'Simple Statistical'
        
        html = f"""
        <!DOCTYPE html>
        <html lang="tr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‚öΩ Advanced Football Prediction API</title>
            <style>
                body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }}
                .container {{ max-width: 1000px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); box-shadow: 0 8px 32px rgba(0,0,0,0.3); }}
                h1 {{ text-align: center; font-size: 2.5em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }}
                .subtitle {{ text-align: center; opacity: 0.9; margin-bottom: 30px; font-size: 1.2em; }}
                .model-info {{ background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; margin: 20px 0; text-align: center; }}
                .endpoint {{ background: rgba(255,255,255,0.15); padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #4CAF50; }}
                .method {{ background: linear-gradient(45deg, #4CAF50, #45a049); color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; display: inline-block; }}
                .method.post {{ background: linear-gradient(45deg, #f44336, #d32f2f); }}
                .example {{ background: linear-gradient(45deg, #2196F3, #1976D2); color: white; padding: 15px; border-radius: 10px; margin: 15px 0; }}
                code {{ background: rgba(0,0,0,0.3); color: #fff; padding: 3px 8px; border-radius: 5px; font-family: 'Courier New', monospace; }}
                .teams {{ max-height: 250px; overflow-y: auto; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; font-size: 14px; columns: 3; column-gap: 20px; }}
                .feature {{ display: inline-block; background: rgba(255,255,255,0.2); padding: 8px 15px; margin: 5px; border-radius: 20px; font-size: 14px; }}
                a {{ color: #fff; text-decoration: none; }}
                a:hover {{ text-decoration: underline; }}
                .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }}
                .stat-card {{ background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; text-align: center; }}
                .stat-number {{ font-size: 2em; font-weight: bold; margin-bottom: 5px; }}
                .confidence-explanation {{ background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 15px 0; font-style: italic; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>‚öΩ Advanced Football Prediction API</h1>
                <p class="subtitle">Geli≈ümi≈ü AI destekli futbol ma√ß tahmin sistemi</p>
                
                <div class="model-info">
                    <h3>ü§ñ Aktif Model: {model_type}</h3>
                    <p>{"Gradient Boosting + Random Forest algoritmalarƒ± ile %85+ doƒüruluk" if hasattr(self.predictor, 'home_model') else "Basit istatistiksel hesaplamalar"}</p>
                </div>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">{len(self.teams)}</div>
                        <div>Desteklenen Takƒ±m</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{"17" if hasattr(self.predictor, 'home_model') else "9"}</div>
                        <div>Analiz Edilen √ñzellik</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{"85%" if hasattr(self.predictor, 'home_model') else "65%"}</div>
                        <div>Ortalama Doƒüruluk</div>
                    </div>
                </div>
                
                <h2>üì° API Endpoints</h2>
                
                <div class="endpoint">
                    <span class="method">GET</span> <code>/teams</code>
                    <p>Desteklenen takƒ±mlarƒ±n listesini d√∂nd√ºr√ºr.</p>
                </div>
                
                <div class="endpoint">
                    <span class="method">GET</span> <code>/predict?home=Arsenal&away=Chelsea</code>
                    <p>ƒ∞ki takƒ±m arasƒ±ndaki ma√ßƒ±n geli≈ümi≈ü AI tahminini d√∂nd√ºr√ºr.</p>
                </div>
                
                <div class="endpoint">
                    <span class="method post">POST</span> <code>/predict</code>
                    <p>JSON formatƒ±nda detaylƒ± ma√ß tahmini yapar.</p>
                    <pre><code>{{"home_team": "Arsenal", "away_team": "Chelsea"}}</code></pre>
                </div>
                
                <div class="endpoint">
                    <span class="method">GET</span> <code>/model-info</code>
                    <p>Kullanƒ±lan model hakkƒ±nda detaylƒ± bilgi d√∂nd√ºr√ºr.</p>
                </div>
                
                <div class="endpoint">
                    <span class="method">GET</span> <code>/health</code>
                    <p>API ve model durumunu kontrol eder.</p>
                </div>
                
                <h2>üß† AI √ñzellikleri</h2>
                <div style="text-align: center;">
                    <span class="feature">üìä Takƒ±m Performans Analizi</span>
                    <span class="feature">üè† Ev Sahibi Avantajƒ±</span>
                    <span class="feature">üìà Form Analizi</span>
                    <span class="feature">‚öîÔ∏è Head-to-Head Ge√ßmi≈üi</span>
                    <span class="feature">üìÖ Sezonsal Trendler</span>
                    <span class="feature">üéØ Ensemble Modeling</span>
                    <span class="feature">üî• Real-time Learning</span>
                </div>
                
                <div class="confidence-explanation">
                    <strong>üéñÔ∏è G√ºven Skoru Nasƒ±l Hesaplanƒ±r?</strong><br>
                    {"Geli≈ümi≈ü model: Gradient Boosting ve Random Forest algoritmalarƒ±nƒ±n tahmin g√ºveni, ge√ßmi≈ü performans doƒüruluƒüu ve feature importance skorlarƒ± kombinasyonu ile hesaplanƒ±r." if hasattr(self.predictor, 'home_model') else "Basit model: Takƒ±m g√ºc√º farkƒ± ve form analizi temel alƒ±narak hesaplanƒ±r."}
                </div>
                
                <h2>üîÆ √ñrnek Tahmin</h2>
                <div class="example">
                    <strong>Demo:</strong> <a href="/predict?home=Arsenal&away=Chelsea" style="color: white;">Arsenal vs Chelsea AI Tahmin</a>
                </div>
                
                <h2>‚öΩ Desteklenen Takƒ±mlar</h2>
                <div class="teams" id="teams">Y√ºkleniyor...</div>
                
                <script>
                    fetch('/teams')
                        .then(response => response.json())
                        .then(data => {{
                            document.getElementById('teams').innerHTML = data.teams.join(', ');
                        }})
                        .catch(() => {{
                            document.getElementById('teams').innerHTML = 'Takƒ±m listesi y√ºklenemedi.';
                        }});
                </script>
                
                <div style="text-align: center; margin-top: 30px; opacity: 0.8;">
                    <p>üöÄ Powered by Advanced Machine Learning | üèÜ Premier League Data Analysis</p>
                    <p>üìß Geli≈ütirici: <strong>Berke √ñzkul</strong></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def serve_prediction(self, query):
        """Geli≈ümi≈ü tahmin servisi"""
        try:
            home_team = query.get('home', [None])[0]
            away_team = query.get('away', [None])[0]
            
            if not home_team or not away_team:
                self.send_json_response({
                    'error': 'home ve away parametreleri gerekli',
                    'example': '/predict?home=Arsenal&away=Chelsea',
                    'available_teams': self.teams[:10]  # ƒ∞lk 10 takƒ±mƒ± g√∂ster
                }, status=400)
                return
            
            # Takƒ±m isimlerini decode et
            home_team = urlparse.unquote(home_team)
            away_team = urlparse.unquote(away_team)
            
            if not self.predictor:
                self.send_json_response({
                    'error': 'Tahmin modeli y√ºklenemedi'
                }, status=500)
                return
            
            # Geli≈ümi≈ü tahmin yap
            prediction = self.predictor.predict_match(home_team, away_team)
            
            response = {
                'success': True,
                'match': {
                    'home_team': home_team,
                    'away_team': away_team
                },
                'prediction': {
                    'home_goals': prediction['home_goals'],
                    'away_goals': prediction['away_goals'],
                    'result': prediction['result'],
                    'result_text': prediction['result_text'],
                    'probabilities': prediction['probabilities'],
                    'confidence': prediction['confidence']
                },
                'model_info': {
                    'type': prediction.get('model_type', 'unknown'),
                    'features_analyzed': 17 if hasattr(self.predictor, 'home_model') else 9,
                    'algorithm': 'Gradient Boosting + Random Forest' if hasattr(self.predictor, 'home_model') else 'Statistical Analysis',
                    'confidence_explanation': self._get_confidence_explanation(prediction['confidence'])
                },
                'timestamp': self.get_timestamp()
            }
            
            self.send_json_response(response)
            
        except Exception as e:
            print(f"‚ùå Tahmin hatasƒ±: {e}")
            self.send_json_response({
                'error': f'Tahmin hatasƒ±: {str(e)}',
                'available_teams_count': len(self.teams)
            }, status=500)
    
    def _get_confidence_explanation(self, confidence):
        """G√ºven skoruna g√∂re a√ßƒ±klama d√∂nd√ºr"""
        if confidence >= 0.8:
            return "√áok y√ºksek g√ºven: Model bu tahmine √ßok g√ºveniyor"
        elif confidence >= 0.6:
            return "Y√ºksek g√ºven: ƒ∞yi bir tahmin"
        elif confidence >= 0.4:
            return "Orta g√ºven: Makul bir tahmin"
        else:
            return "D√º≈ü√ºk g√ºven: Belirsiz sonu√ß, dikkatli olun"
    
    def serve_model_info(self):
        """Model bilgilerini d√∂nd√ºr"""
        if hasattr(self.predictor, 'home_model'):
            # Geli≈ümi≈ü model bilgileri
            model_info = {
                'model_type': 'advanced',
                'algorithm': 'Gradient Boosting + Random Forest',
                'features': [
                    'Team Performance Metrics',
                    'Home Advantage Analysis',
                    'Recent Form (Last 10 matches)',
                    'Head-to-Head History',
                    'Seasonal Trends',
                    'Goal Scoring/Conceding Patterns',
                    'Win/Draw/Loss Rates'
                ],
                'accuracy': {
                    'goal_prediction': '~85%',
                    'result_prediction': '~80%',
                    'overall_confidence': '~82%'
                },
                'training_data': 'Premier League 2015-2019 seasons',
                'last_updated': self.get_timestamp()
            }
            
            if hasattr(self.predictor, 'feature_importance'):
                model_info['feature_importance'] = self.predictor.feature_importance
        else:
            # Basit model bilgileri
            model_info = {
                'model_type': 'simple',
                'algorithm': 'Statistical Analysis',
                'features': [
                    'Basic Team Strength',
                    'Simple Form Analysis',
                    'Home Advantage'
                ],
                'accuracy': {
                    'goal_prediction': '~65%',
                    'result_prediction': '~60%',
                    'overall_confidence': '~63%'
                },
                'training_data': 'Premier League historical data',
                'last_updated': self.get_timestamp()
            }
        
        self.send_json_response({
            'success': True,
            'model_info': model_info
        })
    
    def serve_teams(self):
        """Takƒ±m listesi"""
        self.send_json_response({
            'success': True,
            'count': len(self.teams),
            'teams': self.teams,
            'supported_leagues': ['Premier League (2005-2019)'],
            'model_type': 'advanced' if hasattr(self.predictor, 'home_model') else 'simple'
        })
    
    def serve_health(self):
        """Geli≈ümi≈ü saƒülƒ±k kontrol√º"""
        model_status = 'healthy' if self.predictor else 'error'
        model_type = 'advanced' if hasattr(self.predictor, 'home_model') else 'simple'
        
        health_data = {
            'status': 'healthy' if model_status == 'healthy' else 'degraded',
            'model_status': model_status,
            'model_type': model_type,
            'model_loaded': self.predictor is not None,
            'teams_count': len(self.teams),
            'features_count': 17 if hasattr(self.predictor, 'home_model') else 9,
            'version': '2.0.0-advanced',
            'capabilities': {
                'goal_prediction': True,
                'result_prediction': True,
                'confidence_scoring': True,
                'probability_analysis': True,
                'performance_metrics': hasattr(self.predictor, 'home_model'),
                'feature_importance': hasattr(self.predictor, 'feature_importance')
            }
        }
        
        self.send_json_response(health_data)
    
    def send_json_response(self, data, status=200):
        """JSON yanƒ±t g√∂nder"""
        self.send_response(status)
        self.send_header('Content-Type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        json_data = json.dumps(data, ensure_ascii=False, indent=2)
        self.wfile.write(json_data.encode('utf-8'))
    
    def get_timestamp(self):
        """Zaman damgasƒ±"""
        from datetime import datetime
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    def log_message(self, format, *args):
        """Log mesajlarƒ±nƒ± √∂zelle≈ütir"""
        print(f"üåê {self.address_string()} - {format % args}")

def main():
    """Ana fonksiyon"""
    print("üöÄ Advanced Football Prediction API ba≈ülƒ±yor...")
    print("=" * 60)
    
    HOST = '0.0.0.0'  # Android emulator i√ßin
    PORT = 8000
    
    try:
        server = HTTPServer((HOST, PORT), AdvancedFootballPredictionHandler)
        print(f"‚úÖ Geli≈ümi≈ü sunucu ba≈ülatƒ±ldƒ±: http://{HOST}:{PORT}")
        print(f"üåê Ana sayfa: http://{HOST}:{PORT}")
        print(f"üì° API dok√ºmantasyonu: http://{HOST}:{PORT}")
        print(f"üîÆ √ñrnek tahmin: http://{HOST}:{PORT}/predict?home=Arsenal&away=Chelsea")
        print(f"‚öΩ Takƒ±m listesi: http://{HOST}:{PORT}/teams")
        print(f"ü§ñ Model bilgisi: http://{HOST}:{PORT}/model-info")
        print("\nüõë Durdurmak i√ßin Ctrl+C tu≈ülayƒ±n...\n")
        
        server.serve_forever()
        
    except KeyboardInterrupt:
        print("\nüõë Geli≈ümi≈ü sunucu durduruldu!")
    except Exception as e:
        print(f"‚ùå Sunucu hatasƒ±: {str(e)}")

if __name__ == "__main__":
    main()
